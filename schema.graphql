type CloneablePollUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CloneableTokenUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeesWithdrawn @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PollCreated @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  yesToken: Bytes! # address
  noToken: Bytes! # address
  question: String! # string
  avatar: String! # string
  description: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt! # uint256
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SUSDETokenUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type USDETokenUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Initialized @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CapyPollOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PollResolved @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  winningPosition: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsDistributed @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  user: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeAdded @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  user: Bytes! # address
  amount: BigInt! # uint256
  position: Boolean! # bool
  epoch: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeWithdrawn @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  user: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensDistributed @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  pollAddress: Bytes! # address
  epoch: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
